from __future__ import division
import mysql.connector
from ldaPerArticle import DBWrapper


class NLTKInterface(object):
    def __init__(self, db_host='localhost', db_user='root', db_password='root', db_database='news_db2'):
        self.host = db_host
        self.user = db_user
        self.password = db_password
        self.database = db_database
        self.connection = mysql.connector.connect(host=self.host, user=self.user, password=self.password,
                                                  database=self.database)
        self.cursor = self.connection.cursor(buffered=True)
        self.dbw = DBWrapper()

    def query(self, query):
        return self.cursor.execute(query)

    def get_user(self):
        self.query('SELECT userName FROM users')
        users = self.cursor.fetchall()
        return users

    def show_articles(self):
        self.query('SELECT id, title, body FROM article INNER JOIN article_text ON article.id=article_text.article_id')
        articles = self.cursor.fetchall()
        return articles

    def create_user(self, uname):
        self.cursor.execute('SELECT MAX(userId) from users')
        maxid = self.cursor.fetchone()
        # print "Auto Increment ID: %s" % cur.lastrowid
        self.cursor.execute('INSERT INTO users (userId, userName) VALUES (%s, %s)', (maxid[0] + 1, uname))
        self.connection.commit()
        return "Done"

    def insert_articles(self, article_id, uname):
        self.cursor.execute("UPDATE article SET popularity = popularity + 1 WHERE id = '%s'" % article_id)

        # COALESCE(MAX(id), 0): get the first non-null thing from the list, so if your max is null, it'll give you 0
        self.cursor.execute('SELECT COALESCE(MAX(id), 0) FROM reading_history')
        (maxid,) = self.cursor.fetchone()
        self.cursor.execute('INSERT INTO reading_history(id, user_name, article_id) VALUES (%s, %s, %s)',
                            (maxid + 1, uname, article_id))
        self.connection.commit()
        return "Done"

    def view_text(self, article_id):
        self.query("SELECT id, title, body FROM article INNER JOIN article_text ON article.id=article_text.article_id "
                   "WHERE article.id = '%s'" % article_id)
        (article,) = self.cursor.fetchall()
        return article

    def user_history(self, uname):
        self.query("SELECT article.id, title, reading_history.article_id FROM article INNER JOIN reading_history "
                   "ON article.id=reading_history.article_id WHERE reading_history.user_name = '%s'" % uname)
        articles = self.cursor.fetchall()
        return articles

    def test_history(self, uname):
        self.query("SELECT article_id FROM reading_history WHERE reading_history.user_name = '%s'" % uname)
        articles_id = self.cursor.fetchall()
        return articles_id

    def similarity_preparation(self, uname):
        """
        a = [1, 2, 3, 4, 5]
        b = [1, 3, 5, 6]
        intersection = set(a).intersection(b)
        union = set(a).union(b)
        print(len(intersection) / len(union))
        """

        # session_user's history
        results = self.test_history(uname)
        sessionuser_articles_id = [art[0] for art in results]
        print(sessionuser_articles_id)  # e.g. [1, 2, 3, 4, 4, 1]

        results = self.get_user()
        print("Uname:", uname)
        print("Results:", results)
        # users list
        users = [u[0] for u in results]
        print("Users:", users)

        others = [user for user in users if user != '%s' % uname]
        print("Others:", others)
        """
            results = self.test_history(user)
            user_articles_id = [art[0] for art in results]
            print(user_articles_id)
        """
        # intersection = set(self.query).intersection(set(document))
        # union = set(query).union(set(document))
        # return len(intersection) / len(union)
	
	# for each user in others
	# kai kataskeyazw to similarity matrix
	jaccard_similarity(self, sessionuser_articles_id, user_articles_id):
    
    # returns the jaccard similarity between two lists
    def jaccard_similarity(self, x, y):
        """
        def jaccard_similarity(self,x,y):
            intersection = len(set.intersection(*[set(x), set(y)]))
            union = len(set.union(*[set(x), set(y)]))
            return intersection/float(union)
        """
        pass


def main():
    ins = NLTKInterface()


if __name__ == '__main__':
        main()


"""
def get_recommendations():
    pass


def _parse_other_users():
    # ""SELECT * from user_db
    # build facebook
    # store in DB
    pass

== == ==

users = [afro, alex]
instances = {}
# prepare network
for u in users:
    ins = NTLKInterface(user)
    article_list = ins.show_articles()
    selected_articles = [x for x in articles_list if 'afro' in x]
    for s in selected_articles:
        ins.select_article(s)

    instances[u] = ins

for k, v in instances.items():
    v.get_recommendations()
"""
